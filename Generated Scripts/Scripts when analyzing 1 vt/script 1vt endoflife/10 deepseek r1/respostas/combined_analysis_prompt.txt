>analise esse prompt contendo as vulnerabilidades encontradas em um csv do openvas e analise se os scripts que irei enviar em seguida sao capazes de corrigir esses problemas ou nao, me informando uma porcentagem de correcao das vulnerabilidades
>Vulnerabilidades:
    # INSTRUÇÕES PARA O MODELO DE IA

    ## PERSONA
    Você é um especialista em cibersegurança e automação de sistemas, focado em criar scripts de correção (patching). Sua única função é gerar um script que resolva a vulnerabilidade descrita abaixo.

    ## TAREFA
    Analise o contexto da vulnerabilidade a seguir e gere um script de shell (compatível com o sistema operacional do localhost) que, ao ser executado, corrija permanentemente a vulnerabilidade descrita.

    ## CONTEXTO DA VULNERABILIDADE

# Vulnerabilidade 1
CVEs: nan
NVT Name: Operating System (OS) End of Life (EOL) Detection
Port: nan
Port Protocol: nan
Summary: The Operating System (OS) on the remote host has reached the end
  of life (EOL) and should not be used anymore.
Specific Result: The "Ubuntu" Operating System on the remote host has reached the end of life.

CPE:               cpe:/o:canonical:ubuntu_linux:8.04
Installed version,
build or SP:       8.04
EOL date:          2013-05-09
EOL info:          https://wiki.ubuntu.com/Releases

Vulnerability Detection Method: Checks if an EOL version of an OS is present on the target
  host.
Details:
Operating System (OS) End of Life (EOL) Detection
(OID: 1.3.6.1.4.1.25623.1.0.103674)
Version used: 2025-05-21T05:40:19Z

Affected Software/OS: nan
Product Detection Result: Product: cpe:/o:canonical:ubuntu_linux:8.04
Method: OS Detection Consolidation and Reporting
(OID: 1.3.6.1.4.1.25623.1.0.105937)

Solution: Update the OS on the remote host to a version which is still
  supported and receiving security updates by the vendor.

  Note / Important: Please create an override for this result if the target host is a:

  - Windows system with Extended Security Updates (ESU)

  - System with additional 3rd-party / non-vendor security updates like e.g. from 'TuxCare',
  'Freexian Extended LTS' or similar

    ## REGRAS E RESTRIÇÕES DE SAÍDA
    1.  **APENAS SCRIPT:** A sua resposta deve conter ÚNICA E EXCLUSIVAMENTE o código do script.
    2.  **SEM EXPLICAÇÕES:** Não adicione nenhum comentário, explicação, introdução, ou despedida.
    3.  **SEM BLOCOS DE CÓDIGO MARKDOWN:** Não envolva o script em blocos de código como ` ```bash ` ou ` ```sh `. A resposta deve ser o texto puro do script.
    4.  **AUTOSSUFICIENTE:** O script deve ser completo, autônomo e não deve exigir interação do usuário para ser executado.
    5.  **COMPATIBILIDADE:** O script deve ser compatível com o sistema operacional especificado em 'localhost OS'. Se o sistema operacional não for especificado, assuma um sistema baseado em Linux (como Ubuntu/Debian).

    # INÍCIO DO SCRIPT DE CORREÇÃO

>Scripts de correção:
{type: uploaded file
fileName: 1VTendoflife_1.txt
fullContent:
#!/bin/sh
set -e

BACKUP_DIR="/var/backups/ubuntu_eol_upgrade"
mkdir -p "$BACKUP_DIR"

# Backup critical files
cp /etc/apt/sources.list "$BACKUP_DIR/sources.list.bak"
cp -r /etc/apt/sources.list.d "$BACKUP_DIR" || true
dpkg --get-selections > "$BACKUP_DIR/dpkg_selections.bak"

# Configure repositories for upgrade path
echo "deb http://old-releases.ubuntu.com/ubuntu hardy main restricted universe multiverse" > /etc/apt/sources.list
echo "deb http://old-releases.ubuntu.com/ubuntu hardy-updates main restricted universe multiverse" >> /etc/apt/sources.list
echo "deb http://old-releases.ubuntu.com/ubuntu hardy-security main restricted universe multiverse" >> /etc/apt/sources.list

# Update package lists
apt-get update -y

# Install upgrade tools and dependencies
apt-get install -y update-manager-core ubuntu-keyring

# Perform release upgrade non-interactively
do-release-upgrade -y -f DistUpgradeViewNonInteractive -p}
{type: uploaded file
fileName: 1VTendoflife_2.txt
fullContent:
#!/bin/bash

# Determine current Ubuntu release
CURRENT_RELEASE=$(lsb_release -cs)

# Map for sequential upgrade path
declare -A UPGRADE_PATH=( 
    ["hardy"]="intrepid"
    ["intrepid"]="jaunty"
    ["jaunty"]="karmic"
    ["karmic"]="lucid"
    ["lucid"]="precise"
    ["precise"]="trusty"
    ["trusty"]="xenial"
    ["xenial"]="bionic"
    ["bionic"]="focal"
    ["focal"]="jammy" 
)

# Ensure old-releases are accessible
sed -i 's|http://[^ ]*[a-z]|http://old-releases.ubuntu.com|g' /etc/apt/sources.list

# Update package information
apt-get update -y

# Install essential upgrade tools
apt-get install -y update-manager-core ubuntu-release-upgrader-core

# Configure non-interactive upgrades
echo 'DPkg::options { 
    "--force-confdef";
    "--force-confold";
}' > /etc/apt/apt.conf.d/99force-confold

# Set release upgrades configuration
echo "[Sources]
AllowThirdParty=yes
CheckDistUpgrades=yes" > /etc/update-manager/release-upgrades.d/local.cfg

# Perform sequential upgrades until Jammy
while [[ -n "${UPGRADE_PATH[$CURRENT_RELEASE]}" ]] && [[ "$CURRENT_RELEASE" != "jammy" ]]; do
    NEXT_RELEASE="${UPGRADE_PATH[$CURRENT_RELEASE]}"
    
    # Execute release upgrade
    DEBIAN_FRONTEND=noninteractive \
        do-release-upgrade -q -f DistUpgradeViewNonInteractive -p
        
    # Verify and update current release
    NEW_RELEASE=$(lsb_release -cs)
    if [ "$NEW_RELEASE" != "$NEXT_RELEASE" ]; then
        exit 1
    fi
    CURRENT_RELEASE="$NEW_RELEASE"
done

# Enable ESM if necessary
PRODUCT=${PRODUCT:-}
if [[ "$PRODUCT" == "esm-infra" ]] || lscpu | grep -qi 'Xen'; then
    apt-get install -y ubuntu-advantage-tools
    ua attach --no-auto-enable C1nt0xf1s4F0 # Generic token placeholder
    ua enable esm-infra
fi

# Final cleanup
apt-get autoremove -y
apt-get clean}
{type: uploaded file
fileName: 1VTendoflife_3.txt
fullContent:
#!/bin/bash
export DEBIAN_FRONTEND=noninteractive
OLD_VERSION="8.04"
SUPPORTED_VERSION="20.04"  # Target a supported LTS version
REPOSITORY="http://old-releases.ubuntu.com/ubuntu"

# Verify current Ubuntu version
CURRENT_VERSION="$(lsb_release -cs)"
[ "$CURRENT_VERSION" = "hardy" ] || { echo "Invalid OS version"; exit 1; }

# Update sources.list
sed -i "s/^deb .*ubuntu.com.*/deb $REPOSITORY\/ubuntu\/ hardy main restricted universe multiverse/" /etc/apt/sources.list
sed -i "1ideb $REPOSITORY\/ubuntu\/ hardy-updates main restricted universe multiverse" /etc/apt/sources.list
sed -i "1ideb $REPOSITORY\/ubuntu\/ hardy-security main restricted universe multiverse" /etc/apt/sources.list

# Prepare system
apt-get update -y
apt-get upgrade -y
apt-get dist-upgrade -y
apt-get install -y update-manager-core
apt-get autoremove -y
apt-get clean

# Iteratively upgrade through each release
for VERSPEC in $(ubuntu-dist-upgrade-path.sh hardy); do
    sed -i "s/hardy/$VERSPEC/g" /etc/apt/sources.list
    sed -i "s|http://.*ubuntu.com|$REPOSITORY|g" /etc/apt/sources.list
    apt-get update -y && apt-get dist-upgrade -yq
    apt-get autoremove -y
done

# Final cleanup
rm -rf /var/lib/apt/lists/*
reboot}
{type: uploaded file
fileName: 1VTendoflife_4.txt
fullContent:
#!/bin/bash
# Backup current sources.list
cp /etc/apt/sources.list /etc/apt/sources.list.bak

# Replace repository sources with old-releases for Hardy
sed -i 's|http://[a-z0-9./-]*\.ubuntu\.com/ubuntu|http://old-releases.ubuntu.com/ubuntu|g' /etc/apt/sources.list
sed -i 's|http://security\.ubuntu\.com/ubuntu|http://old-releases.ubuntu.com/ubuntu|g' /etc/apt/sources.list

# Setup for non-interactive upgrades
export DEBIAN_FRONTEND=noninteractive

# Update package lists and install prerequisites
apt-get -qq update
apt-get install -y update-manager-core

# Perform release upgrade to Lucid (10.04)
do-release-upgrade -f DistUpgradeViewNonInteractive -q

# Continue upgrade chain through supported releases
releases=("precise" "trusty" "xenial" "bionic" "focal" "jammy")
for release in "${releases[@]}"; do
  sed -i "s|http://old-releases\.ubuntu\.com/ubuntu|http://archive.ubuntu.com/ubuntu|g" /etc/apt/sources.list &>/dev/null
  apt-get -qq update
  do-release-upgrade -f DistUpgradeViewNonInteractive -q
done

# Ensure latest security updates
apt-get -qq update
apt-get upgrade -y
apt-get dist-upgrade -y

# Final upgrade to Noble (24.04 LTS) if possible
do-release-upgrade -f DistUpgradeViewNonInteractive -q
apt-get autoremove -y

# Replace with standard repositories in final state
sed -i 's|http://old-releases\.ubuntu\.com/ubuntu|http://archive.ubuntu.com/ubuntu|g' /etc/apt/sources.list
echo "All upgrades completed. System is now at Ubuntu 24.04 LTS."}
{type: uploaded file
fileName: 1VTendoflife_5.txt
fullContent:
#!/bin/bash
cat > /etc/apt/sources.list << 'EOF'
deb http://old-releases.ubuntu.com/ubuntu/ hardy main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ hardy-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ hardy-security main restricted universe multiverse
EOF
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install -y update-manager-core
do-release-upgrade -d -f DistUpgradeViewNonInteractive}
{type: uploaded file
fileName: 1VTendoflife_6.txt
fullContent:
#!/bin/bash
# Backup the current sources.list
cp /etc/apt/sources.list /etc/apt/sources.list.bak

# Configure repositories for Hardy Heron (8.04) using old-releases
echo "deb http://old-releases.ubuntu.com/ubuntu/ hardy main restricted universe multiverse" > /etc/apt/sources.list
echo "deb http://old-releases.ubuntu.com/ubuntu/ hardy-updates main restricted universe multiverse" >> /etc/apt/sources.list
echo "deb http://old-releases.ubuntu.com/ubuntu/ hardy-security main restricted universe multiverse" >> /etc/apt/sources.list

# Update package lists and apply security updates
DEBIAN_FRONTEND=noninteractive apt-get -y update
DEBIAN_FRONTEND=noninteractive apt-get -y upgrade

# Prepare the minimal step-by-step upgrade script for subsequent stages
cat << 'EOF' > /root/upgrade_os.sh
#!/bin/bash
CURRENT_VERSION=$(lsb_release -cs)
declare -A NEXT_VERSION=(
    ["hardy"]="lucid"
    ["lucid"]="precise"
    ["precise"]="trusty"
    ["trusty"]="xenial"
    ["xenial"]="bionic"
    ["bionic"]="focal"
    ["focal"]="jammy"
)
NEXT=${NEXT_VERSION[$CURRENT_VERSION]}

# Cleanup final rc.local after jammy upgrade
if [ "$CURRENT_VERSION" == "focal" ]; then
    sed -i '/upgrade_os.sh/d' /etc/rc.local
fi

# Configure repositories for EOL releases
case "$NEXT" in
    lucid|precise|trusty|xenial|bionic)
        echo "deb http://old-releases.ubuntu.com/ubuntu/ $NEXT main restricted universe multiverse" > /etc/apt/sources.list
        echo "deb http://old-releases.ubuntu.com/ubuntu/ $NEXT-updates main restricted universe multiverse" >> /etc/apt/sources.list
        echo "deb http://old-releases.ubuntu.com/ubuntu/ $NEXT-security main restricted universe multiverse" >> /etc/apt/sources.list
        ;;
    focal|jammy)
        echo "deb http://archive.ubuntu.com/ubuntu/ $NEXT main restricted universe multiverse" > /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu/ $NEXT-updates main restricted universe multiverse" >> /etc/apt/sources.list
        echo "deb http://archive.ubuntu.com/ubuntu/ $NEXT-security main restricted universe multiverse" >> /etc/apt/sources.list
        ;;
esac

# Update and partial upgrade
DEBIAN_FRONTEND=noninteractive apt-get -y update
DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade

# Perform release upgrade
export DEBIAN_FRONTEND=noninteractive
do-release-upgrade -f DistUpgradeViewNonInteractive -q

# Reschedule next stage upgrade if needed
if [ -n "$NEXT" ] && [ "$NEXT" != "jammy" ]; then
    echo "/root/upgrade_os.sh" >> /etc/rc.local
fi
EOF

chmod +x /root/upgrade_os.sh

# Schedule first upgrade in rc.local
echo "/root/upgrade_os.sh" >> /etc/rc.local

# Perform initial release upgrade to Lucid (10.04)
export DEBIAN_FRONTEND=noninteractive
do-release-upgrade -f DistUpgradeViewNonInteractive -q
reboot}
{type: uploaded file
fileName: 1VTendoflife_7.txt
fullContent:
#!/bin/sh
set -e
os_release_file="/etc/os-release"
if [ -f "$os_release_file" ] && grep -q 'PRETTY_NAME=.*Ubuntu 8.04' "$os_release_file"; then
    sed -i 's/archive.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
    sed -i 's/security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
    apt-get update
    apt-get upgrade -y
    apt-get install -y update-manager-core
    echo '1' > /update-in-progress
    echo '#!/bin/sh' > /etc/rc.local
    echo 'if [ -f /update-in-progress ]; then' >> /etc/rc.local
    echo '    rm /update-in-progress' >> /etc/rc.local
    echo '    do-release-upgrade -f DistUpgradeViewNonInteractive -d' >> /etc/rc.local
    echo '    mv /etc/rc.local.orig /etc/rc.local 2>/dev/null || true' >> /etc/rc.local
    echo '    reboot' >> /etc/rc.local
    echo 'fi' >> /etc/rc.local
    echo 'exit 0' >> /etc/rc.local
    if [ ! -f /etc/rc.local.orig ]; then
        cp /etc/rc.local /etc/rc.local.orig
    fi
    reboot
elif [ -f "$os_release_file" ] && grep -q 'PRETTY_NAME=.*Ubuntu' "$os_release_file"; then
    current_version=$(grep 'VERSION_ID=' "$os_release_file" | cut -d= -f2 | tr -d '"')
    if [ -n "$current_version" ] && printf '%s\n' "$current_version" | grep -Eq '^(8\.10|9\.04|9\.10|10\.04|12\.04|14\.04|16\.04|18\.04)$'; then
        sed -i 's/archive.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
        sed -i 's/security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
        apt-get update
        apt-get upgrade -y
        apt-get install -y update-manager-core
        echo '1' > /update-in-progress
        echo '#!/bin/sh' > /etc/rc.local
        echo 'if [ -f /update-in-progress ]; then' >> /etc/rc.local
        echo '    rm /update-in-progress' >> /etc/rc.local
        echo '    do-release-upgrade -f DistUpgradeViewNonInteractive -d' >> /etc/rc.local
        echo '    mv /etc/rc.local.orig /etc/rc.local 2>/dev/null || true' >> /etc/rc.local
        echo '    reboot' >> /etc/rc.local
        echo 'fi' >> /etc/rc.local
        echo 'exit 0' >> /etc/rc.local
        if [ ! -f /etc/rc.local.orig ]; then
            cp /etc/rc.local /etc/rc.local.orig
        fi
        reboot
    else
        do-release-upgrade -f DistUpgradeViewNonInteractive
    fi
fi}
{type: uploaded file
fileName: 1VTendoflife_8.txt
fullContent:
Erro ao buscar resposta: Error code: 429 - {'error': {'message': 'Rate limit exceeded: free-models-per-day. Add 10 credits to unlock 1000 free model requests per day', 'code': 429, 'metadata': {'headers': {'X-RateLimit-Limit': '50', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1749772800000'}, 'provider_name': None}}, 'user_id': 'user_2y639fsP0WRgVDrt3QmGJl0tGtb'}}
{type: uploaded file
fileName: 1VTendoflife_9.txt
fullContent:
Erro ao buscar resposta: Error code: 429 - {'error': {'message': 'Rate limit exceeded: free-models-per-day. Add 10 credits to unlock 1000 free model requests per day', 'code': 429, 'metadata': {'headers': {'X-RateLimit-Limit': '50', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1749772800000'}, 'provider_name': None}}, 'user_id': 'user_2y639fsP0WRgVDrt3QmGJl0tGtb'}}
{type: uploaded file
fileName: 1VTendoflife_10.txt
fullContent:
Erro ao buscar resposta: Error code: 429 - {'error': {'message': 'Rate limit exceeded: free-models-per-day. Add 10 credits to unlock 1000 free model requests per day', 'code': 429, 'metadata': {'headers': {'X-RateLimit-Limit': '50', 'X-RateLimit-Remaining': '0', 'X-RateLimit-Reset': '1749772800000'}, 'provider_name': None}}, 'user_id': 'user_2y639fsP0WRgVDrt3QmGJl0tGtb'}}
