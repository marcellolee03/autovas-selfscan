#!/bin/bash
set -e

# Verificar configurações do Apache
if [ -f "/etc/apache2/sites-enabled/000-default.conf" ] || [ -f "/etc/apache2/sites-available/000-default.conf" ]; then
    # Backup das configurações atuais
    backup_dir="/etc/apache2/ssl/backup_$(date +%Y%m%d%H%M%S)"
    mkdir -p "$backup_dir"
    for conf in sites-enabled/000-default.conf sites-available/default-ssl.conf ssl/apache.crt ssl/apache.key; do
        if [ -f "/etc/apache2/$conf" ]; then
            cp "/etc/apache2/$conf" "$backup_dir"
        fi
    done

    # Configurar certificado autoassinado
    mkdir -p /etc/apache2/ssl
    if [ ! -f "/etc/apache2/ssl/apache.crt" ] || [ ! -f "/etc/apache2/ssl/apache.key" ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/apache2/ssl/apache.key \
            -out /etc/apache2/ssl/apache.crt \
            -subj "/CN=localhost" >/dev/null 2>&1
    fi

    # Habilitar módulos necessários
    a2enmod ssl >/dev/null 2>&1
    a2enmod headers >/dev/null 2>&1
    a2ensite default-ssl >/dev/null 2>&1

    # Configurações para o site HTTP (redirecionamento)
    if [ -f "/etc/apache2/sites-available/000-default.conf" ]; then
        CONF_FILE="/etc/apache2/sites-available/000-default.conf"
    else
        CONF_FILE="/etc/apache2/sites-enabled/000-default.conf"
    fi

    sed -i '/<VirtualHost \*:80>/,/<\/VirtualHost>/ {
        /<\/VirtualHost>/i \
        \    Redirect permanent \/ https:\/\/%{HTTP_HOST}\/ \
        \    Header always set Content-Security-Policy "upgrade-insecure-requests" \
        /^# Redirect/d
    }' "$CONF_FILE"

    # Configurações para o site HTTPS
    if [ ! -f "/etc/apache2/sites-available/default-ssl.conf" ]; then
        cat > /etc/apache2/sites-available/default-ssl.conf <<EOF
<IfModule mod_ssl.c>
    <VirtualHost _default_:443>
        SSLEngine on
        SSLCertificateFile /etc/apache2/ssl/apache.crt
        SSLCertificateKeyFile /etc/apache2/ssl/apache.key
        Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        Header always set Content-Security-Policy "default-src https: 'unsafe-inline' 'unsafe-eval';"
        RequestHeader set X-Forwarded-Proto "https"
    </VirtualHost>
</IfModule>
EOF
    else
        sed -i '/<VirtualHost.*:443>/,/<\/VirtualHost>/ {
            s|# SSLEngine|SSLEngine|
            s|# SSLCertificateFile|SSLCertificateFile|
            s|# SSLCertificateKeyFile|SSLCertificateKeyFile|
            /<\/VirtualHost>/i \
        \    Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" \
        \    Header always set Content-Security-Policy "default-src https: 'unsafe-inline' 'unsafe-eval';" \
        \    RequestHeader set X-Forwarded-Proto "https"
        }' /etc/apache2/sites-available/default-ssl.conf
    fi

    # Configurar SSL global
    if [ -f "/etc/apache2/conf-available/ssl-params.conf" ]; then
        ssl_params="/etc/apache2/conf-available/ssl-params.conf"
        if ! grep -q "Header always set Strict-Transport-Security" "$ssl_params"; then
            echo "Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"" >> "$ssl_params"
        fi
    fi

    systemctl restart apache2 >/dev/null 2>&1
    exit 0
fi

# Verificar configurações do Nginx
if [ -f "/etc/nginx/sites-enabled/default" ] || [ -f "/etc/nginx/conf.d/default.conf" ]; then
    # Backup das configurações atuais
    backup_dir="/etc/nginx/ssl/backup_$(date +%Y%m%d%H%M%S)"
    mkdir -p "$backup_dir"
    for conf in sites-enabled/default conf.d/default.conf ssl/nginx.crt ssl/nginx.key; do
        if [ -f "/etc/nginx/$conf" ]; then
            cp "/etc/nginx/$conf" "$backup_dir"
        fi
    done

    # Configurar certificado autoassinado
    mkdir -p /etc/nginx/ssl
    if [ ! -f "/etc/nginx/ssl/nginx.crt" ] || [ ! -f "/etc/nginx/ssl/nginx.key" ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/nginx/ssl/nginx.key \
            -out /etc/nginx/ssl/nginx.crt \
            -subj "/CN=localhost" >/dev/null 2>&1
    fi

    # Configurar redirecionamento HTTP->HTTPS
    DEFAULT_CONF=""
    if [ -f "/etc/nginx/sites-enabled/default" ]; then
        DEFAULT_CONF="/etc/nginx/sites-enabled/default"
    elif [ -f "/etc/nginx/conf.d/default.conf" ]; then
        DEFAULT_CONF="/etc/nginx/conf.d/default.conf"
    fi

    if [ -n "$DEFAULT_CONF" ]; then
        # Substituir ou adicionar bloco de redirecionamento
        if grep -q "listen.*80" "$DEFAULT_CONF"; then
            sed -i '/^[[:space:]]*listen[[:space:]]*80;/,/}/ {
                /^[[:space:]]*location\/{/,/}/d
                /^[[:space:]]*listen[[:space:]]*80;/a \    return 301 https://\$host\$request_uri;
                /^[[:space:]]*index/d
                /^[[:space:]]*root/d
            }' "$DEFAULT_CONF"
        else
            sed -i '1i server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    return 301 https://\$host\$request_uri;\n}\n' "$DEFAULT_CONF"
        fi

        # Configurar servidor HTTPS
        if ! grep -q "listen.*443" "$DEFAULT_CONF"; then
            cat >> "$DEFAULT_CONF" <<EOF

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name _;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src https: 'unsafe-inline' 'unsafe-eval';" always;

    # Configuração original após este ponto
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;
}
EOF
        else
            sed -i '/^[[:space:]]*listen.*443/,/server_name/ {
                s/http2.*/http2;/;
                s/listen.*443.*/& ssl http2;/
            }' "$DEFAULT_CONF"
            
            sed -i '/server_name.*;/a \
    ssl_certificate /etc/nginx/ssl/nginx.crt;\
    ssl_certificate_key /etc/nginx/ssl/nginx.key;\
    ssl_protocols TLSv1.2 TLSv1.3;\
    ssl_prefer_server_ciphers on;\
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;\
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;\
    add_header Content-Security-Policy "default-src https: \x27unsafe-inline\x27 \x27unsafe-eval\x27;" always;' "$DEFAULT_CONF"
        fi

        # Configurações SSL globais
        if [ -f "/etc/nginx/nginx.conf" ]; then
            sed -i '/events\s{/i \
# Configurações SSL Globais\n\
server_names_hash_bucket_size 128;\n\
ssl_session_cache shared:SSL:10m;\n\
ssl_session_timeout 10m;\n\
keepalive_timeout 70;\n' /etc/nginx/nginx.conf
        fi

        systemctl restart nginx >/dev/null 2>&1
        exit 0
    fi
fi

# Caso não encontre Apache ou Nginx, tentar instalar webserver com SSL
if [ -f "/etc/os-release" ]; then
    . /etc/os-release
    if [ "$ID" = "ubuntu" ] || [ "$ID" = "debian" ]; then
        apt-get update >/dev/null 2>&1
        apt-get install -y nginx openssl >/dev/null 2>&1
        systemctl enable nginx >/dev/null 2>&1
        systemctl start nginx >/dev/null 2>&1
        # Executar novamente as configurações do Nginx
        exec "$0"
    fi
fi

exit 1