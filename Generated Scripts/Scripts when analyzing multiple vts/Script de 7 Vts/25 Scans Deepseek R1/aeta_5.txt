```bash
#!/bin/bash

# Ensure script runs as root
if [ "$(id -u)" -ne 0 ]; then
  echo "Requisitos: Execute como root" >&2
  exit 1
fi

# Vulnerabilidade 1,4,5,6: Configurações SSL/TLS para Apache
if command -v apache2 >/dev/null; then
  apache_dir="/etc/apache2"
  ssl_conf="$apache_dir/mods-available/ssl.conf"
  ports_conf="$apache_dir/ports.conf"
  sites_dir="$apache_dir/sites-enabled"
  
  # Backup do SSL conf
  cp "$ssl_conf" "$ssl_conf.bak"

  # Forçar HTTPS (Vulnerabilidade 1)
  for site_conf in "$sites_dir"/*; do
    if [ -f "$site_conf" ] && ! grep -q "RewriteEngine" "$site_conf"; then
      sed -i "s/<VirtualHost \*:80>/<VirtualHost \*:80>\n    RewriteEngine On\n    RewriteCond %{HTTPS} off\n    RewriteRule ^ https:\/\/%{HTTP_HOST}%{REQUEST_URI} [L,R=301]/" "$site_conf"
    fi
  done

  # Atualizar protocolos TLS e cifras (Vulnerabilidade 4,6)
  sed -i '/^SSLProtocol/s/.*/SSLProtocol -all +TLSv1.2/' "$ssl_conf"
  sed -i '/^SSLCipherSuite/s/.*/SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384/' "$ssl_conf"
  echo "SSLHonorCipherOrder on" >> "$ssl_conf"
  
  # Desabilitar renegociação (Vulnerabilidade 5)
  echo "SSLInsecureRenegotiation off" >> "$ssl_conf"
  echo "SSLStrictSNIVHostCheck on" >> "$ssl_conf"

  systemctl restart apache2
fi

# Vulnerabilidade 1,4,5,6: Configurações SSL/TLS para Nginx
if command -v nginx >/dev/null; then
  nginx_dir="/etc/nginx"
  nginx_conf="$nginx_dir/nginx.conf"
  
  # Forçar HTTPS (Vulnerabilidade 1)
  sed -i '/listen 80;/,/location \// s/location \//return 301 https:\/\/$host$request_uri;\n    } # Forçar HTTPS\n    location \//' "$nginx_conf"

  # Atualizar protocolos TLS e cifras (Vulnerabilidade 4,6)
  sed -i '/ssl_protocols/s/.*/    ssl_protocols TLSv1.2 TLSv1.3;/' "$nginx_conf"
  sed -i '/ssl_ciphers/s/.*/    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";/' "$nginx_conf"
  echo "    ssl_prefer_server_ciphers on;" >> "$nginx_conf"
  
  # Desabilitar renegociação (Vulnerabilidade 5)
  echo "    ssl_renegotiation_limit 0;" >> "$nginx_conf"

  nginx -t && systemctl restart nginx
fi

# Vulnerabilidade 2: Configuração DNS BIND9
if command -v named >/dev/null; then
  bind_conf="/etc/bind/named.conf"
  if [ -f "$bind_conf" ]; then
    cp "$bind_conf" "$bind_conf.bak"
    # Desabilitar recursão e restringir queries
    if ! grep -q "recursion no;" "$bind_conf"; then
      echo -e "options {\n    recursion no;\n    allow-query { localhost; };\n};" >> "$bind_conf"
    fi
    systemctl restart bind9
  fi
fi

# Vulnerabilidade 3: Bloquear mensagens ICMP Timestamp
iptables -A INPUT -p icmp --icmp-type timestamp-request -j DROP
iptables -A INPUT -p icmp --icmp-type timestamp-reply -j DROP
ip6tables -A INPUT -p icmpv6 --icmpv6-type 13 -j DROP
ip6tables -A INPUT -p icmpv6 --icmpv6-type 14 -j DROP

# Vulnerabilidade 7: Desabilitar TCP Timestamps
sysctl -w net.ipv4.tcp_timestamps=0
if ! grep -q "net.ipv4.tcp_timestamps" /etc/sysctl.conf; then
  echo "net.ipv4.tcp_timestamps = 0" >> /etc/sysctl.conf
else
  sed -i 's/^net.ipv4.tcp_timestamps.*/net.ipv4.tcp_timestamps = 0/' /etc/sysctl.conf
fi

# Salvar regras de firewall persistentemente (adaptar conforme distro)
if command -v iptables-save >/dev/null; then
  if command -v netfilter-persistent >/dev/null; then
    netfilter-persistent save
  elif command -v iptables-persistent >/dev/null; then
    /etc/init.d/iptables-persistent save
  fi
fi

echo "Aplicado configuracao segura"
```