```powershell
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$($MyInvocation.MyCommand.Path)`"" -Verb RunAs
    exit
}
$currentPython310Version = [version]"0.0.0.0"
$currentPython312Version = [version]"0.0.0.0"
$pythonLocations = @()
if (Test-Path "HKLM:\SOFTWARE\Python\PythonCore\3.10\InstallPath") {
    $installPath = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Python\PythonCore\3.10\InstallPath").'(default)'
    $pythonLocations += $installPath
}
if (Test-Path "HKLM:\SOFTWARE\WOW6432Node\Python\PythonCore\3.10\InstallPath") {
    $installPath = (Get-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Python\PythonCore\3.10\InstallPath").'(default)'
    $pythonLocations += $installPath
}
$pythonExecutable = "python.exe"
foreach ($location in $pythonLocations) {
    $pythonExePath = Join-Path -Path $location -ChildPath $pythonExecutable
    if (Test-Path $pythonExePath) {
        $versionOutput = & $pythonExePath --version 2>&1
        if ($versionOutput -match "Python (\d+\.\d+\.\d+)") {
            $version = [version]$matches[1]
            if ($version -lt [version]"3.10.99" -and $version -gt $currentPython310Version) {
                $currentPython310Version = $version
            }
        }
    }
}
if ($currentPython310Version -ne [version]"0.0.0.0" -and $currentPython310Version -lt [version]"3.10.16") {
    $requiredVersion310 = [version]"3.10.16"
    if ([System.Environment]::Is64BitOperatingSystem) {
        $installerUrl = "https://www.python.org/ftp/python/$requiredVersion310/python-$requiredVersion310-amd64.exe"
        $installerPath = "$env:TEMP\python-$requiredVersion310-amd64.exe"
    }
    else {
        $installerUrl = "https://www.python.org/ftp/python/$requiredVersion310/python-$requiredVersion310.exe"
        $installerPath = "$env:TEMP\python-$requiredVersion310.exe"
    }
    Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
    Start-Process -FilePath $installerPath -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1", "CompileAll=1" -Wait
    Remove-Item -Path $installerPath -Force
}
$pythonLocations = @()
if (Test-Path "HKLM:\SOFTWARE\Python\PythonCore\3.12\InstallPath") {
    $installPath = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Python\PythonCore\3.12\InstallPath").'(default)'
    $pythonLocations += $installPath
}
if (Test-Path "HKLM:\SOFTWARE\WOW6432Node\Python\PythonCore\3.12\InstallPath") {
    $installPath = (Get-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Python\PythonCore\3.12\InstallPath").'(default)'
    $pythonLocations += $installPath
}
foreach ($location in $pythonLocations) {
    $pythonExePath = Join-Path -Path $location -ChildPath $pythonExecutable
    if (Test-Path $pythonExePath) {
        $versionOutput = & $pythonExePath --version 2>&1
        if ($versionOutput -match "Python (\d+\.\d+\.\d+)") {
            $version = [version]$matches[1]
            if ($version -lt [version]"3.12.99" -and $version -gt $currentPython312Version) {
                $currentPython312Version = $version
            }
        }
    }
}
if ($currentPython312Version -ne [version]"0.0.0.0" -and $currentPython312Version -lt [version]"3.12.9") {
    $requiredVersion312 = [version]"3.12.9"
    if ([System.Environment]::Is64BitOperatingSystem) {
        $installerUrl = "https://www.python.org/ftp/python/$requiredVersion312/python-$requiredVersion312-amd64.exe"
        $installerPath = "$env:TEMP\python-$requiredVersion312-amd64.exe"
    }
    else {
        $installerUrl = "https://www.python.org/ftp/python/$requiredVersion312/python-$requiredVersion312.exe"
        $installerPath = "$env:TEMP\python-$requiredVersion312.exe"
    }
    Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
    Start-Process -FilePath $installerPath -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1", "CompileAll=1" -Wait
    Remove-Item -Path $installerPath -Force
}
$tls10ServerPath = "HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server"
$tls11ServerPath = "HKLM:SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.1\Server"
if (-not (Test-Path $tls10ServerPath)) {
    New-Item -Path $tls10ServerPath -Force | Out-Null
}
if (-not (Test-Path $tls11ServerPath)) {
    New-Item -Path $tls11ServerPath -Force | Out-Null
}
New-ItemProperty -Path $tls10ServerPath -Name "Enabled" -Value 0 -PropertyType DWORD -Force | Out-Null
New-ItemProperty -Path $tls10ServerPath -Name "DisabledByDefault" -Value 1 -PropertyType DWORD -Force | Out-Null
New-ItemProperty -Path $tls11ServerPath -Name "Enabled" -Value 0 -PropertyType DWORD -Force | Out-Null
New-ItemProperty -Path $tls11ServerPath -Name "DisabledByDefault" -Value 1 -PropertyType DWORD -Force | Out-Null
$sshdConfigPath = "$env:ProgramData\ssh\sshd_config"
if (Test-Path $sshdConfigPath) {
    $content = Get-Content -Path $sshdConfigPath
    $updatedContent = @()
    $macLineFound = $false
    foreach ($line in $content) {
        if ($line -match '^\s*MACs\s+') {
            $macLineFound = $true
            $macAlgorithms = $line -split '\s+' | Select-Object -Skip 1
            $newMacList = $macAlgorithms | Where-Object { $_ -notmatch '^umac-64(\-etm)?@openssh\.com$' }
            $newLine = "MACs " + ($newMacList -join ',')
            $updatedContent += $newLine
        }
        else {
            $updatedContent += $line
        }
    }
    if (-not $macLineFound) {
        $updatedContent += "MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256,hmac-sha2-512,umac-128@openssh.com"
    }
    $updatedContent | Set-Content -Path $sshdConfigPath -Force
    $sshdService = Get-Service -Name "sshd" -ErrorAction SilentlyContinue
    if ($sshdService -and $sshdService.Status -eq "Running") {
        Restart-Service -Name "sshd" -Force
    }
}
```